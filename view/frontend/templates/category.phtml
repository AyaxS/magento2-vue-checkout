<div id="category">
    <template>
        <buttonelement
            buttontype="button"
            buttonclass="button"
            text="Create new cart"
            @click.native="createNewCart"
        />

        CartId: {{ cartId }}
    </template>

    <template>
        <h1>Cart</h1>

        <listelement
            :items="cart.items"
        />

        Items Qty: {{ cart.items_qty }}

        Items Count: {{ cart.items_count }}
    </template>

    <template>
        <h1>Products list</h1>
        <ul class="products">
            <li v-for="product in products">
                {{ product.name }}
                {{ product.sku }}
                {{ product.price }}

                <buttonelement
                    buttontype="button"
                    buttonclass="button"
                    text="Add to cart"
                    @click.native="addToCart(product.sku)"
                />
            </li>
        </ul>
    </template>
</div>

<script>
    window.snowdog = {};
    window.snowdog.baseUrl = "<?= $block->getBaseUrl() ?>";
</script>

<script>
    require([
        'vue', 
        'Snowdog_VueCheckout/js/components/button',
        'Snowdog_VueCheckout/js/components/list',
        'Snowdog_VueCheckout/js/lib/babel.min'
    ], function(Vue, buttonComponent, listComponent, es6) {
        new buttonComponent();
        new listComponent();

        var app = new Vue({
            el: '#category',
            data: {
                loaded: true,
                products: [],
                cartId: window.localStorage.cartId || false,
                cart: {}
            },
            methods: {
                parseJSON: function (response) {
                    return new Promise(
                        (resolve) => response.json()
                            .then((json) => resolve({
                                status: response.status,
                                ok: response.ok,
                                json
                            }))
                    )
                },
                request: function (url, params = {}) {
                    return new Promise((resolve, reject) => {
                        fetch(url, params)
                            .then(this.parseJSON)
                            .then((response) => {
                                if (response.ok) {
                                    return resolve(response.json)
                                }
                                // extract the error from the server's json
                                return reject(response.json)
                            })
                            .catch((error) => reject({
                                networkError: error.message
                            }));
                    })
                },
                fetchProducts() {
                    this.request(`${window.snowdog.baseUrl}index.php/rest/V1/products?searchCriteria%5BpageSize%5D=20`)
                        .then(response => {
                            this.products = response.items;
                        })
                },
                createNewCart() {
                    this.request(`${window.snowdog.baseUrl}index.php/rest/V1/guest-carts`, { method: 'POST' })
                        .then(response => {
                            window.localStorage.cartId = response;
                            this.cartId = response;

                            this.getCart();
                        })
                },
                getCart() {
                    this.request(`${window.snowdog.baseUrl}index.php/rest/V1/guest-carts/${this.cartId}`)
                        .then(response => {
                            this.cart = response;
                        })
                },
                addToCart(sku) {
                    this.request(
                        `${window.snowdog.baseUrl}index.php/rest/V1/guest-carts/id/items/addToCart`,
                        {
                            method: 'PUT',
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify({
                                "cart_item": {
                                    "sku": sku,
                                    "quote_id": this.cartId,
                                    "qty": 1
                                }
                            })
                        }
                    )
                        .then(response => {
                            let updated = false;
                            this.cart.items.map(item => {
                                if (item.item_id === response.item_id) {
                                    item.qty = response.qty;
                                    updated = true;
                                }
                            });

                            if (!updated) {
                                this.cart.items.push(response);
                            }
                        })
                        .catch(error => {
                            console.error(error)
                        })
                }
            },
            created() {
                if (this.cartId === false) {
                    this.createNewCart();
                }
                else {
                    this.getCart();
                }

                this.fetchProducts();
            }
        })
    });
</script>
