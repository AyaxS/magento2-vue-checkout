<?= $this->getChildHtml() ?>

<div id="checkout" class="checkout-container">
    <section class="billing-address" v-if="step === 'billing'">
        <h1>
            <?= /* @escapeNotVerified */ __('Billing Address'); ?>
        </h1>
        
        <form class="billing-address__form">
            <template v-for="field in billingAddress">
                <template v-if="field.type !== 'select'">
                    <inputfield 
                        :label="field.label" 
                        :name="field.name" 
                        :type="field.type"
                        :value="field.value"
                        fieldclass="billing-address__field"
                        inputclass="input billing-address__input"
                    />
                </template>
                
                <template v-if="field.type === 'select'">
                    <selectfield
                        :label="field.label"
                        :name="field.name"
                        :options="field.options"
                        fieldclass="billing-address__field"
                        selectclass="billing-address__select"
                        @change.native="changeSelection"
                    />
                </template>

                <template v-if="field.name === 'region_id'">
                    <inputfield 
                        label="State/Province" 
                        name="region" 
                        type="text"
                        fieldclass="billing-address__field region--hidden"
                        inputclass="input billing-address__input"
                    />
                </template>
            </template>
        </form>
    </section>

    <section class="payment-methods" v-if="step === 'shipping'">
        <h1>
            <?= /* @escapeNotVerified */ __('Choose payment method'); ?>
        </h1>

        <template>
            <radiofield
                :options="paymentMethods"
                name="payment"
                labelclass="labels"
                containerclass="payment-methods__handler"
                fieldclass="radio payment-methods__field"
                inputclass="payment-methods__radio"
            />
        </template>

        <template>
            <checkboxfield 
                id="paymentAddress"
                labelclass="label"
                fieldclass="checkbox payment-methods__field"
                inputclass="payment-methods__checkbox"
                checked="true"
                name="paymentAddress"
                text="My billing and shipping address are the same"
                @change.native="toggleShippingAddress"
            />
        </template>

        <form class="payment-methods__form payment-methods--hidden">
            <h1>
                <?= /* @escapeNotVerified */ __('Shipping address'); ?>
            </h1>
            
            <template v-for="field in shippingAddress">
                <template v-if="field.type !== 'select'">
                    <inputfield 
                        :label="field.label" 
                        :name="field.name" 
                        :type="field.type"
                        :value="field.value"
                        fieldclass="shipping-address__field"
                        inputclass="input shipping-address__input"
                    />
                </template>

                <template v-if="field.type === 'select'">
                    <selectfield
                        :label="field.label"
                        :name="field.name"
                        :options="field.options"
                        fieldclass="shipping-address__field"
                        selectclass="shipping-address__select"
                        @change.native="changeSelection"
                    />
                </template>

                <template v-if="field.name === 'region_id'">
                    <inputfield 
                        label="State/Province" 
                        name="region" 
                        type="text"
                        fieldclass="shipping-address__field region--hidden"
                        inputclass="input shipping-address__input"
                    />
                </template>
            </template>

            <template>
                <buttonelement
                    buttontype="button"
                    buttonclass="button"
                    text="Cancel"
                    @click.native="cancelShippingInformations"
                />
            </template>

            <template>
                <buttonelement
                    buttontype="button"
                    buttonclass="button"
                    text="Update"
                    @click.native="updateShippingInformations"
                />
            </template>
        </form>
    </section>

    <section v-if="step === 'shipping'">
        <h1>
            <?= /* @escapeNotVerified */ __('Product List'); ?>
        </h1>

        <template>
            <products 
                containerclass="grid"
                itemclass="grid__columns"
                :products="config.totalsData.items"
                :currency="config.totalsData.base_currency_code"
            />
        </template>

        <h1>
            <?= /* @escapeNotVerified */ __('Summary'); ?>
        </h1>

        <template>
            <summation
                :items="config.totalsData.total_segments"
                :discountamout="config.totalsData.discount_amount"
                :couponcode="config.totalsData.coupon_code"
                :itemsqty="config.totalsData.items_qty"
                :currencycode="config.totalsData.base_currency_code"
            />
        </template>
    </section>

    <template v-if="step === 'billing'">
        <buttonelement
            buttontype="button"
            buttonclass="button"
            text="Set billing address"
            @click.native="setBillingAddress"
        />
    </template>

    <template v-if="step === 'shipping'">
        <buttonelement
            buttontype="button"
            buttonclass="button"
            text="Set shipping information"
            @click.native="setShippingInformation"
        />
    </template>

    <template v-if="step === 'order'">
        <buttonelement
            buttontype="button"
            buttonclass="button"
            text="Back"
            @click.native="step = 'shipping'"
        />
    </template>

    <template v-if="step === 'order'">
        <buttonelement
            buttontype="button"
            buttonclass="button"
            text="Make Order"
            @click.native="makeOrder"
        />
    </template>

    <template v-if="step === 'success'">
        <?= /* @escapeNotVerified */ __('We did it!'); ?>

        <a href="/what-is-new.html">
            <?= /* @escapeNotVerified */ __('Back to category'); ?>
        </a>
    </template>
</div>

<style>
.region--hidden,
.payment-methods--hidden {
    display: none;
}
</style>

<script>
    require([
        'vue', 
        'Snowdog_VueCheckout/js/components/input.babel',
        'Snowdog_VueCheckout/js/components/radio.babel',
        'Snowdog_VueCheckout/js/components/checkbox.babel',
        'Snowdog_VueCheckout/js/components/list.babel',
        'Snowdog_VueCheckout/js/components/select.babel',
        'Snowdog_VueCheckout/js/components/button.babel',
        'Snowdog_VueCheckout/js/components/product.babel',
        'Snowdog_VueCheckout/js/components/summation.babel',
        'Snowdog_VueCheckout/js/lib/babel.min'
    ], function(
        Vue, 
        inputComponent,
        checkboxComponent, 
        radioComponent,
        listComponent,
        selectComponent, 
        buttonComponent, 
        productsComponent,
        summationComponent,
        es6
    ) {
        new inputComponent();
        new checkboxComponent();
        new radioComponent();
        new listComponent();
        new selectComponent();
        new buttonComponent();
        new productsComponent();
        new summationComponent();

        var app = new Vue({
            el: '#checkout',
            data: {
                baseUrl: '<?= $block->getBaseUrl() ?>',
                config: <?= \Zend_Json::encode($block->getCheckoutConfig()) ?>,
                shippingAddress: {},
                billingAddress: billingAddress,
                regionList: regionList,
                paymentMethods: paymentMethods,
                step: 'billing'
            },
            computed: {
                cartId() {
                    return this.config.quoteData.entity_id
                },
                cart() {
                    const cart = this.config.quoteData;
                    cart.items = this.config.quoteItemData;
                    return cart;
                }
            },
            methods: {
                parseJSON(response) {
                    return new Promise(
                        (resolve) => response.json()
                            .then((json) => resolve({
                                status: response.status,
                                ok: response.ok,
                                json
                            }))
                    )
                },
                request(url, params = {}) {
                    return new Promise((resolve, reject) => {
                        fetch(url, params)
                            .then(this.parseJSON)
                            .then((response) => {
                                if (response.ok) {
                                    return resolve(response.json)
                                }
                                // extract the error from the server's json
                                return reject(response.json)
                            })
                            .catch((error) => reject({
                                networkError: error.message
                            }));
                    })
                },
                setBillingAddress() {
                    //setting billing address here - 'billing'
                    this.request(
                        `${this.baseUrl}index.php/rest/V1/guest-carts/${this.cartId}/billing-address`,
                        {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify(this.getBillingInformations())
                        }
                    )
                        .then(response => {
                            this.step = 'shipping';
                        });
                },
                getBillingInformations() {
                    // getting billing informations from form

                    const response           = shippingInformation,
                          billingAddressForm = document.querySelector('.billing-address__form').querySelectorAll('input, select, textarea');

                    this.settingData(billingAddressForm, 'billing_address', response);

                    const address = {"address": response.addressInformation.billing_address};

                    return address;
                },
                getShippingMethods() {
                    //getting shipping methods - step 'shipping'
                    this.request(
                        `${this.baseUrl}index.php/rest/V1/guest-carts/${this.cartId}/shipping-methods`,
                        {
                            method: 'GET',
                            headers: {
                                'Content-Type': 'application/json'
                            }
                        }
                    )
                        .then(response => {
                        });
                },
                setShippingInformation() {
                    this.request(
                        `${this.baseUrl}index.php/rest/V1/guest-carts/${this.cartId}/shipping-information`,
                        {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify(this.getShippingInformation())
                        }
                    )
                        .then(response => {
                            this.config.paymentMethods = response.payment_methods;
                            this.config.totalsData = response.totals;
                            this.step = 'order';
                        });
                },
                makeOrder() {
                    this.request(
                        `${this.baseUrl}index.php/rest/V1/guest-carts/${this.cartId}/order`,
                        {
                            method: 'PUT',
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify({
                                "paymentMethod": {
                                    "po_number": "string",
                                    "method": "checkmo",
                                    "additional_data": [
                                        "string"
                                    ],
                                    "extension_attributes": {
                                        "agreement_ids": [
                                            "string"
                                        ]
                                    }
                                }
                            })
                        }
                    )
                        .then(response => {
                            this.step = 'success';
                        })
                },
                getShippingInformation() {
                    const response                = shippingInformation,
                          billingAddressForm      = document.querySelector('.billing-address__form').querySelectorAll('input, select, textarea'),
                          shippingAddressCheckbox = document.getElementById('paymentAddress'),
                          shippingAddressForm     = document.querySelector('.payment-methods__form').querySelectorAll('input, select, textarea');

                    this.settingData(billingAddressForm, 'billing_address', response);
                    
                    if (shippingAddressCheckbox.checked) {
                        response.addressInformation.billing_address = response.addressInformation.shipping_address;
                        response.addressInformation.shipping_address['same_as_billing'] = 1;
                    }
                    else {
                        this.settingData(shippingAddressForm, 'shipping_address', response);
                    }

                    return response;
                },
                settingData(elements, whereToAdd, dataToReturn) {
                    elements.forEach(element => {
                        const id    = element.id,
                              obj   = dataToReturn.addressInformation[whereToAdd],
                              value = element.value;

                        if (element.tagName === "INPUT" && value.length > 0) {
                            if (id === 'street[0]') {
                                obj.street = [value];
                            }
                            else if (id === 'street[1]') {
                                obj.street.push(value);
                            }
                            else {
                                obj[id] = value;
                            }
                        }
                        else if (id === 'region_id' && value.length > 0) {
                            obj[id] = parseInt(value);
                            obj['region'] = element.selectedOptions[0].innerHTML.trim();
                        }
                        else if (id === 'country_id' && value.length > 0) {
                            obj[id] = value;
                        }
                        else {
                            this.returnError();
                            return false;
                        }
                    });

                    return dataToReturn;
                },
                returnError(element, cssClass, text) {

                },
                changeSelection(event) {
                    const getForm        = event.srcElement.parentElement.parentElement,
                          countryId      = getForm.querySelector('#country_id'),
                          eventSelectId  = event.srcElement.id,
                          inputRegion    = getForm.querySelector('#region'),
                          regionId       = getForm.querySelector('#region_id');
                          
                    if ( countryId == getForm.querySelector("#"+eventSelectId)) {
                        const eventOptionValue = event.srcElement.selectedOptions[0].value,
                              propertyRegions  = this.returnCountryRegions(this.regionList, eventOptionValue);

                        inputRegion.value = "";

                        if(propertyRegions.length > 1) {
                            regionId.innerHTML = propertyRegions.join(" ");

                            this.regionToggle(inputRegion.parentNode, regionId.parentNode, 'region--hidden');
                        }
                        else {
                            this.regionToggle(regionId.parentNode, inputRegion.parentNode, 'region--hidden');
                        }
                    }
                    else if (regionId == getForm.querySelector("#"+eventSelectId)) {
                        const eventOptionCountryId = event.srcElement.selectedOptions[0].dataset.countryid,
                              eventOptionValue     = event.srcElement.selectedOptions[0].value;

                        if (!countryId.querySelector(`option[value="${eventOptionCountryId}"]`).selected) {
                            const propertyRegions = this.returnCountryRegions(this.regionList, eventOptionCountryId);

                            regionId.innerHTML = propertyRegions.join(" ");
                            regionId.querySelector(`option[value="${eventOptionValue}"]`).selected = true;
                            countryId.querySelector(`option[value="${eventOptionCountryId}"]`).selected = true;

                            this.regionToggle(inputRegion.parentNode, regionId.parentNode, 'region--hidden');
                        }
                    }
                },
                returnCountryRegions(regions, optionToCompare) {
                    let newRegionList = [];

                    newRegionList.push(`
                        <option value="">
                            <?= /* @escapeNotVerified */ __('Please select a region, state or province.'); ?>
                        </option>
                    `);

                    regions.forEach(region => {
                        if (region.country_id === optionToCompare) {
                            newRegionList.push(`
                                <option value="${region.value}" data-countryid="${region.country_id}">
                                    ${region.label}
                                </option>
                            `);
                        }
                    });

                    return newRegionList;
                },
                regionToggle(elementToHide, elementToShow, classToToggle) {
                    elementToHide.classList.add(classToToggle);
                    elementToShow.classList.remove(classToToggle);
                },
                toggleShippingAddress(event) {
                    const element     = event.srcElement,
                          paymentForm = document.querySelector('.payment-methods__form');

                    if (element.checked) {
                        this.shippingAddress = {};

                        if (!paymentForm.classList.contains('payment-methods--hidden')) {
                            paymentForm.classList.add('payment-methods--hidden');
                        }
                    }
                    else {
                        this.shippingAddress = shippingAddress;

                        if (paymentForm.classList.contains('payment-methods--hidden')) {
                            paymentForm.classList.remove('payment-methods--hidden');
                        }
                         
                    }
                },
                cancelShippingInformations() {
                    const paymentCheckbox = document.getElementById('paymentAddress'),
                          paymentForm     = document.querySelector('.payment-methods__form');

                    this.shippingAddress = {};
                    paymentForm.classList.add('payment-methods--hidden');
                    paymentCheckbox.checked = true;
                },
                updateShippingInformations() {
                    
                }
            }
        })
    });
</script>