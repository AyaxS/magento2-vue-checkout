<?= $this->getChildHtml() ?>

<div id="checkout" class="checkout-container">
    <section class="shipping-address">
        <div v-for="field in shippingAddress">
            <template v-if="field.type !== 'select'">
                <inputfield 
                    :label="field.label" 
                    :name="field.name" 
                    :type="field.type"
                    :value="field.value"
                    fieldclass="shipping-address__field"
                    inputclass="input shipping-address__input"
                />
            </template>
            
            <template v-if="field.type === 'select'">
                <selectfield
                    :label="field.label"
                    :name="field.name"
                    fieldclass="shipping-address__field"
                    selectclass="shipping-address__select"
                    :options="field.options"
                />
            </template>
        </div>
    </section>

    <section v-if="step !== 'success'">
        <h1>Totals</h1>
        <pre>{{ config.totalsData }}</pre>
    </section>

    <template v-if="step === 'shipping'">
        <buttonelement
            buttontype="button"
            buttonclass="button"
            text="Set shipping information"
            @click.native="setShippingInformation"
        />
    </template>

    <template v-if="step === 'billing'">
        <buttonelement
            buttontype="button"
            buttonclass="button"
            text="Back"
            @click.native="step = 'shipping'"
        />
    </template>

    <template v-if="step === 'billing'">
        <buttonelement
            buttontype="button"
            buttonclass="button"
            text="Make Order"
            @click.native="makeOrder"
        />
    </template>

    <template v-if="step === 'success'">
        We did it!
        <a href="/what-is-new.html">
            Back to category
        </a>
    </template>
</div>

<script>
    require([
        'vue', 
        'Snowdog_VueCheckout/js/components/input.babel',
        'Snowdog_VueCheckout/js/components/select.babel',
        'Snowdog_VueCheckout/js/components/button.babel',
        'Snowdog_VueCheckout/js/lib/babel.min'
    ], function(
        Vue, 
        inputComponent, 
        selectComponent, 
        buttonComponent, 
        es6
    ) {
        new inputComponent();
        new selectComponent();
        new buttonComponent();

        var app = new Vue({
            el: '#checkout',
            data: {
                baseUrl: '<?= $block->getBaseUrl() ?>',
                config: <?= \Zend_Json::encode($block->getCheckoutConfig()) ?>,
                shippingAddress: shippingAddress,
                billingAddress: {},
                step: 'shipping',
                type: [
                    'checkbox',
                    'date',
                    'email',
                    'hidden',
                    'number',
                    'password',
                    'radio',
                    'select',
                    'multiselect',
                    'tel',
                    'text',
                    'textarea'
                ]
            },
            computed: {
                cartId() {
                    return this.config.quoteData.entity_id
                },
                cart() {
                    const cart = this.config.quoteData;
                    cart.items = this.config.quoteItemData;
                    return cart;
                }
            },
            methods: {
                parseJSON: function (response) {
                    return new Promise(
                        (resolve) => response.json()
                            .then((json) => resolve({
                                status: response.status,
                                ok: response.ok,
                                json
                            }))
                    )
                },
                request: function (url, params = {}) {
                    return new Promise((resolve, reject) => {
                        fetch(url, params)
                            .then(this.parseJSON)
                            .then((response) => {
                                if (response.ok) {
                                    return resolve(response.json)
                                }
                                // extract the error from the server's json
                                return reject(response.json)
                            })
                            .catch((error) => reject({
                                networkError: error.message
                            }));
                    })
                },
                setShippingInformation() {
                    this.request(
                        `${this.baseUrl}index.php/rest/V1/guest-carts/${this.cartId}/shipping-information`,
                        {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify(shippingInformation)
                        }
                    )
                        .then(response => {
                            this.config.paymentMethods = response.payment_methods;
                            this.config.totalsData = response.totals;
                            this.step = 'billing';
                        });
                },
                makeOrder() {
                    this.request(
                        `${this.baseUrl}index.php/rest/V1/guest-carts/${this.cartId}/order`,
                        {
                            method: 'PUT',
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify({
                                "paymentMethod": {
                                    "po_number": "string",
                                    "method": "checkmo",
                                    "additional_data": [
                                        "string"
                                    ],
                                    "extension_attributes": {
                                        "agreement_ids": [
                                            "string"
                                        ]
                                    }
                                }
                            })
                        }
                    )
                        .then(response => {
                            this.step = 'success';
                        })
                }
            }
        })
    });
</script>