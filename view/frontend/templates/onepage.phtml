<?= $this->getChildHtml() ?>

<div id="checkout" class="checkout-container">
    <section class="shipping-address">
        <h1><?= /* @escapeNotVerified */ __('Shipping Address'); ?></h1>
        
        <div v-for="field in shippingAddress">
            <template v-if="field.type !== 'select'">
                <inputfield 
                    :label="field.label" 
                    :name="field.name" 
                    :type="field.type"
                    :value="field.value"
                    fieldclass="shipping-address__field"
                    inputclass="input shipping-address__input"
                />
            </template>
            
            <template v-if="field.type === 'select'">
                <selectfield
                    :label="field.label"
                    :name="field.name"
                    fieldclass="shipping-address__field"
                    selectclass="shipping-address__select"
                    :options="field.options"
                    @change.native="changeSelection"
                />
            </template>

            <template v-if="field.name === 'region_id'">
                <inputfield 
                    label="State/Province" 
                    name="region" 
                    type="text"
                    fieldclass="shipping-address__field shipping-address--hidden"
                    inputclass="input shipping-address__input"
                />
            </template>
        </div>
    </section>

    <section class="payment-methods">
        <h1><?= /* @escapeNotVerified */ __('Choose payment method'); ?></h1>

        <template v-for="payment in paymentMethods">
            <radiofield
                :label="payment.title" 
                :value="payment.code"
                name="payment"
                labelclass="label"
                fieldclass="radio payment-methods__radio"
                inputclass="payment-methods__field"
            />
        </template>

        My billing and shipping address are the same
    </section>

    <section v-if="step !== 'success'">
        <h1><?= /* @escapeNotVerified */ __('Product List'); ?></h1>

        <template>
            <products 
                containerclass="grid"
                itemclass="grid__columns"
                :products="config.totalsData.items"
                :currency="config.totalsData.base_currency_code"
            />
        </template>

        <h1><?= /* @escapeNotVerified */ __('Summary'); ?></h1>

        <template>
            <summation
                :items="config.totalsData.total_segments"
                :discountamout="config.totalsData.discount_amount"
                :couponcode="config.totalsData.coupon_code"
                :itemsqty="config.totalsData.items_qty"
                :currencycode="config.totalsData.base_currency_code"
            />
        </template>
    </section>

    <template v-if="step === 'shipping'">
        <buttonelement
            buttontype="button"
            buttonclass="button"
            text="Set shipping information"
            @click.native="setShippingInformation"
        />
    </template>

    <template v-if="step === 'billing'">
        <buttonelement
            buttontype="button"
            buttonclass="button"
            text="Back"
            @click.native="step = 'shipping'"
        />
    </template>

    <template v-if="step === 'billing'">
        <buttonelement
            buttontype="button"
            buttonclass="button"
            text="Make Order"
            @click.native="makeOrder"
        />
    </template>

    <template v-if="step === 'success'">
        <?= /* @escapeNotVerified */ __('We did it!'); ?>
        <a href="/what-is-new.html">
            <?= /* @escapeNotVerified */ __('Back to category'); ?>
        </a>
    </template>
</div>

<style>
.shipping-address--hidden {
    display: none;
}
</style>

<script>
    require([
        'vue', 
        'Snowdog_VueCheckout/js/components/input.babel',
        'Snowdog_VueCheckout/js/components/radio.babel',
        'Snowdog_VueCheckout/js/components/list.babel',
        'Snowdog_VueCheckout/js/components/select.babel',
        'Snowdog_VueCheckout/js/components/button.babel',
        'Snowdog_VueCheckout/js/components/product.babel',
        'Snowdog_VueCheckout/js/components/summation.babel',
        'Snowdog_VueCheckout/js/lib/babel.min'
    ], function(
        Vue, 
        inputComponent, 
        radioComponent,
        listComponent,
        selectComponent, 
        buttonComponent, 
        productsComponent,
        summationComponent,
        es6
    ) {
        new inputComponent();
        new radioComponent();
        new listComponent();
        new selectComponent();
        new buttonComponent();
        new productsComponent();
        new summationComponent();

        var app = new Vue({
            el: '#checkout',
            data: {
                baseUrl: '<?= $block->getBaseUrl() ?>',
                config: <?= \Zend_Json::encode($block->getCheckoutConfig()) ?>,
                shippingAddress: shippingAddress,
                billingAddress: {},
                regionList: regionList,
                paymentMethods: paymentMethods,
                step: 'shipping'
            },
            computed: {
                cartId() {
                    return this.config.quoteData.entity_id
                },
                cart() {
                    const cart = this.config.quoteData;
                    cart.items = this.config.quoteItemData;
                    return cart;
                }
            },
            methods: {
                parseJSON: function (response) {
                    return new Promise(
                        (resolve) => response.json()
                            .then((json) => resolve({
                                status: response.status,
                                ok: response.ok,
                                json
                            }))
                    )
                },
                request: function (url, params = {}) {
                    return new Promise((resolve, reject) => {
                        fetch(url, params)
                            .then(this.parseJSON)
                            .then((response) => {
                                if (response.ok) {
                                    return resolve(response.json)
                                }
                                // extract the error from the server's json
                                return reject(response.json)
                            })
                            .catch((error) => reject({
                                networkError: error.message
                            }));
                    })
                },
                setShippingInformation() {
                    this.request(
                        `${this.baseUrl}index.php/rest/V1/guest-carts/${this.cartId}/shipping-information`,
                        {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify(shippingInformation)
                        }
                    )
                        .then(response => {
                            this.config.paymentMethods = response.payment_methods;
                            this.config.totalsData = response.totals;
                            this.step = 'billing';
                        });
                },
                makeOrder() {
                    this.request(
                        `${this.baseUrl}index.php/rest/V1/guest-carts/${this.cartId}/order`,
                        {
                            method: 'PUT',
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify({
                                "paymentMethod": {
                                    "po_number": "string",
                                    "method": "checkmo",
                                    "additional_data": [
                                        "string"
                                    ],
                                    "extension_attributes": {
                                        "agreement_ids": [
                                            "string"
                                        ]
                                    }
                                }
                            })
                        }
                    )
                        .then(response => {
                            this.step = 'success';
                        })
                },
                changeSelection(event) {
                    const countryId      = document.getElementById('country_id'),
                          eventSelectId  = event.srcElement.id,
                          inputRegion    = document.getElementById('region'),
                          regionId       = document.getElementById('region_id');

                    if ( countryId == document.getElementById(eventSelectId)) {
                        const eventOptionValue = event.srcElement.selectedOptions[0].value,
                              propertyRegions  = this.returnCountryRegions(this.regionList, eventOptionValue);

                        if(propertyRegions.length > 0) {
                            regionId.innerHTML = propertyRegions.join(" ");

                            this.regionToggle(inputRegion.parentNode, regionId.parentNode, 'shipping-address--hidden');
                        }
                        else {
                            inputRegion.value = "";

                            this.regionToggle(regionId.parentNode, inputRegion.parentNode, 'shipping-address--hidden');
                        }
                    }
                    else if (regionId == document.getElementById(eventSelectId)) {
                        const eventOptionCountryId = event.srcElement.selectedOptions[0].dataset.countryid;

                        if (!countryId.querySelector(`option[value="${eventOptionCountryId}"]`).selected) {
                            const propertyRegions = this.returnCountryRegions(this.regionList, eventOptionCountryId);

                            regionId.innerHTML = propertyRegions.join(" ");
                            countryId.querySelector(`option[value="${eventOptionCountryId}"]`).selected = true;

                            this.regionToggle(inputRegion.parentNode, regionId.parentNode, 'shipping-address--hidden');
                        }
                    }
                },
                returnCountryRegions(regions, optionToCompare) {
                    let newRegionList = [];

                    regions.forEach(region => {
                        if (region.country_id === optionToCompare) {
                            newRegionList.push(`
                                <option value="${region.value}" data-countryid="${region.country_id}">
                                    ${region.label}
                                </option>
                            `);
                        }
                    });

                    return newRegionList;
                },
                regionToggle(elementToHide, elementToShow, classToToggle) {
                    elementToHide.classList.add(classToToggle);
                    elementToShow.classList.remove(classToToggle);
                }
            }
        })
    });
</script>